<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://aceysx.github.io</id>
    <title>Acey</title>
    <updated>2019-08-30T10:11:07.066Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://aceysx.github.io"/>
    <link rel="self" href="https://aceysx.github.io/atom.xml"/>
    <subtitle>终身学习实践者</subtitle>
    <logo>https://aceysx.github.io/images/avatar.png</logo>
    <icon>https://aceysx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Acey</rights>
    <entry>
        <title type="html"><![CDATA[「OpenJkd-11 源码」 : Object]]></title>
        <id>https://aceysx.github.io/post/openjkd-11-yuan-ma-object</id>
        <link href="https://aceysx.github.io/post/openjkd-11-yuan-ma-object">
        </link>
        <updated>2019-08-30T06:38:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="object">Object</h2>
<p>在 Java 中 <code>Object</code> 类是所有类的祖先类，<code>Object</code> 没有定义属性，一共有13个方法。其它所有的子类都会继承这些方法。</p>
<h2 id="构造函数">构造函数</h2>
<h3 id="registernatives">registerNatives()</h3>
<pre><code class="language-java"> private static native void registerNatives();
 static {
        registerNatives();
 }
</code></pre>
<blockquote>
<p>在 Java 中，用 native 关键字修饰的函数表明该方法的实现并不是在Java中去完成，而是由C/C++去完成，并被编译成了.dll，由Java去调用</p>
</blockquote>
<p>而 <code>registerNatives()</code>方法的主要作用则是将C/C++中的方法映射到 Java 中的 <code>native</code>方法，实现方法命名的解耦。</p>
<h3 id="构造函数-public-object">构造函数 public Object()</h3>
<pre><code class="language-java"> @HotSpotIntrinsicCandidate
 public Object() {}
</code></pre>
<blockquote>
<p>@HotSpotIntrinsicCandidate注解，该注解是特定于Java虚拟机的注解。通过该注解表示的方法可能( 但不保证 )通过HotSpot VM自己来写汇编或IR编译器来实现该方法以提供性能。 它表示注释的方法可能（但不能保证）由HotSpot虚拟机内在化。如果HotSpot VM用手写汇编和/或手写编译器IR（编译器本身）替换注释的方法以提高性能，则方法是内在的。 也就是说虽然外面看到的在JDK9中weakCompareAndSet和compareAndSet底层依旧是调用了一样的代码，但是不排除HotSpot VM会手动来实现weakCompareAndSet真正含义的功能的可能性</p>
</blockquote>
<p>一般创建对象的时候直接使用 <code>new className(Args)</code> 来创建一个新的对象。而在类的定义过程中，对于未定义构造函数的类，那么它就会默认继承<code>Object</code>的无参构造函数，如果定了一个或多个构造函数，那么就需要把无参构造函数方法也写上。</p>
<h2 id="方法">方法</h2>
<h3 id="public-final-native-class-getclass">public final native Class&lt;?&gt; getClass()</h3>
<pre><code class="language-java"> @HotSpotIntrinsicCandidate
 public final native Class&lt;?&gt; getClass();
</code></pre>
<p><code>getClass</code>返回运行时当前对象的类对象。在 Java 中，类是对具有一组相同特征或行为的实例的抽象进行描述。而<strong>类对象</strong>则是对<strong>类</strong>的特征和行为进行描述（即类的名称，属性，方法...）。也就是说通过获取到类对象，则可以获取到该类的所有属性，方法...</p>
<h3 id="public-native-int-hashcode">public native int hashCode()</h3>
<pre><code class="language-java">@HotSpotIntrinsicCandidate
public native int hashCode();
</code></pre>
<p><code>hashCode</code> 返回当前对象的哈希码。<code>hashCode</code>遵守以下三个约定</p>
<ul>
<li>在 Java 程序运行期间，对同一个对象多次调用<code>hashCode</code>，那么它们的返回值需要是一致的。（前提：没有对对象进行修改）</li>
<li>如果两个对象相等（调用<code>equals()</code>方法），那么这两个对象的 <code>hashCode</code>也是一样</li>
<li>两个对象调用<code>hashCode</code>方法返回的哈希码相等，这两个对象不一定相等</li>
</ul>
<p>也即是说，调用<code>equals</code>方法返回值相等，那么调用<code>hashCode</code>方法返回值也一定相等。所以，在重写<code>euqlas</code>方法之后，一定要重写<code>hashCode</code>方法。</p>
<p>那么判断对象是否先等可以直接用<code>equals</code>来判断，为什么还需要<code>hashCode</code>方法呢？</p>
<p>其实<code>hashCode</code>方法的一个主要作用是为了增强哈希表的性能。比如：我们知道<code>Set</code>集合不能存在相同的两个对象，那么该怎么判断两个对象是否相同呢？如果没有<code>hashCode</code>，那么就需要进行遍历来逐一判断。那么有<code>hashCode</code>，我们就可以计算出即将要加入集合的对象的<code>hashCode</code>，然后查看集合中对应的位置上是否有对象即可。</p>
<h3 id="public-boolean-equalsobject-obj">public boolean equals(Object obj)</h3>
<pre><code class="language-java">public boolean equals(Object obj) {
   return (this == obj);
}
    
</code></pre>
<p><code>equals()</code>用于判断两个对象是否相等。根据 <code>Object</code>    的实现，可以看到判断的依据是看两个对象的引用地址是否相等。</p>
<p>而一般我们会用另外一种方式来判断是否相等。即<code>==</code>,<code>==</code>表示的是两个变量值是否相等（基础类型的值在内存地址中存储的是值）</p>
<p>那么我们想要判断是否相等：</p>
<ul>
<li>如果是基础类型，就可以直接用<code>==</code>来判断</li>
<li>如果是引用类型，那么就需要通过<code>equals</code>方法来判断（在实际业务中，一般会重写<code>equals</code>方法）</li>
</ul>
<p>需要注意的一点是<code>String</code>也是引用类型，我们判断<code>String</code>的时候是直接使用的<code>equals</code>方法，而按照默认的<code>equals</code>实现，创建两个具有相同值的<code>String</code>对象，那么<code>equals</code>返回的应该是<code>false</code>，</p>
<pre><code class="language-java">public boolean equals(Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceof String) {
        String aString = (String)anObject;
        if (coder() == aString.coder()) {
            return isLatin1() ? StringLatin1.equals(value, aString.value)
                              : StringUTF16.equals(value, aString.value);
        }
    }
    return false;
}
</code></pre>
<h3 id="public-string-tostring">public String toString()</h3>
<pre><code class="language-java"> public String toString() {  
    return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());  
}
</code></pre>
<p><code>toString()</code>返回该对象的字符串表示。在使用 <code>System.out.printLn(obj)</code>的时候，其内部也是调用的<code>toString</code>方法。可以按需重写<code>toString</code>方法。</p>
<h3 id="protected-native-object-clone">protected native Object clone()</h3>
<pre><code class="language-java">protected native Object clone() throws CloneNotSupportedException;
</code></pre>
<p><code>clone()</code>方法返回的是当前对象的引用，指向的是新<code>clone</code>出来的对象，此对象和原对象占用不同的堆空间。</p>
<p><strong><code>clone</code>方法的正确调用需要实现 <code>cloneable</code> 接口，如果没有实现该接口，那么子类调用父类的 <code>clone</code>方法则会抛出<code>CloneNotSupportedException</code>异常</strong></p>
<blockquote>
<p>Cloneable接口仅是一个表示接口，接口本身不包含任何方法，用来指示Object.clone()可以合法的被子类引用所调用。</p>
</blockquote>
<h4 id="使用">使用</h4>
<p>先看一段代码</p>
<pre><code class="language-java">public class CloneTest {  
  
    public static void main(String[] args) {  
        Object o1 = new Object();  
        try {
            Object clone = o1.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
    }  
  
}  
</code></pre>
<p>执行这段段代码会抛出<code>The method clone() from the type Object is not visible</code>异常。原因是<code>clone</code> 方法是被 <code>protected</code>修饰的，也就是说被<code>protected</code>修饰的属性和方法，<strong>在同一包下或在不同包下的子类可以访问</strong>。显然，<code>CloneTest</code>和<code>Object</code>不在同一包下，不过按照字面意思，<code>CloneTest</code>会默认继承<code>Object</code>，所以即使在不同的包下，应该也是可以访问的才对。那么问题就出现在「在不同包下的子类可以访问」这句话上：</p>
<blockquote>
<p>不同包中的子类可以访问: 是指当两个类不在同一个包中的时候，继承自父类的子类内部且主调（调用者）为子类的引用时才能访问父类用protected修饰的成员（属性/方法）。 在子类内部，主调为父类的引用时并不能访问此protected修饰的成员。（super关键字除外）</p>
</blockquote>
<p>也就是说在子类中想要调用父类的<code>protected</code>方法，可以</p>
<ul>
<li>在子类中重写父类的方法</li>
<li>在子类中通过<code>super.methodName()</code>来调用父类方法</li>
</ul>
<h4 id="浅拷贝深拷贝">浅拷贝&amp;深拷贝</h4>
<blockquote>
<p>浅拷贝： 浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址。<br>
深拷贝： 深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。</p>
</blockquote>
<p>对于浅拷贝来说，如果含有引用类型，那么修改其中一个对象的引用值，那么会影响到另外一个对象。按层级来说，浅拷贝只拷贝了第一层。对于默认的<code>clone</code>实现是浅拷贝。如果想要实现深拷贝，可以</p>
<ul>
<li>对对象进行序列化</li>
<li>重写<code>clone</code>方法</li>
</ul>
<pre><code class="language-java">//序列化实现深拷贝

public class CloneUtils {
    @SuppressWarnings(&quot;unchecked&quot;)
    public static &lt;T extends Serializable&gt; T clone(T obj){
        T cloneObj = null;
        try {
            //写入字节流
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            ObjectOutputStream obs = new ObjectOutputStream(out);
            obs.writeObject(obj);
            obs.close();
            
            //分配内存，写入原始对象，生成新对象
            ByteArrayInputStream ios = new ByteArrayInputStream(out.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(ios);
            //返回生成的新对象
            cloneObj = (T) ois.readObject();
            ois.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cloneObj;
    }
}

public class Person implements Serializable{
    private static final long serialVersionUID = 2631590509760908280L;
}

public class CloneTest {
    public static void main(String[] args) {
        Person person =  new Person();
        Person person1 =  CloneUtils.clone(person);     
    }
}


参考：https://blog.csdn.net/chenssy/article/details/12952063
</code></pre>
<h3 id="protected-void-finalize">protected void finalize()</h3>
<pre><code class="language-java">protected void finalize() throws Throwable {}
</code></pre>
<p><code>finalize()</code>方法主要与 Java 垃圾回收机制有关，JVM准备对此对形象所占用的内存空间进行垃圾回收前，将被调用。所以此方法并不是由我们主动去调用的。</p>
<h3 id="waitnotifynotifyall">wait()/notify/notifyAll</h3>
<p>详情可见 <a href="">线程安全</a>()</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[思维导图最佳实践]]></title>
        <id>https://aceysx.github.io/post/si-wei-dao-tu-zui-jia-shi-jian</id>
        <link href="https://aceysx.github.io/post/si-wei-dao-tu-zui-jia-shi-jian">
        </link>
        <updated>2019-08-30T05:54:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-思维导图是什么">一 思维导图是什么</h2>
<hr>
<p>思维导图也被称为是心智图，是一种图像式思维的工具以及利用图形式思考辅助工具来表达思维的工具。</p>
<blockquote>
<p>图形式思考辅助工具：是一种将知识、概念或构思用视觉方式表达出来，以便将来向他人重述自己的思考过程，让形象思维和逻辑思维联合起来。</p>
</blockquote>
<p>心智图是使用一个中心关键字或想法来引起形象化的构造和分类的想法。它用一个中央关键词或想法以辐射线形连接所有的代表字词、想法、任务或其它关联项目的图解方式。</p>
<h2 id="二-思维导图的特点">二 思维导图的特点</h2>
<hr>
<p>思维导图被应用在很多方面，比如：个人、家庭、教育...  在做记录、问题决策以及信息传达时是非常高效的，非常有利于记忆并向他人重述自己的思考过程，之所以这么有效，离不开它的以下几个特点：</p>
<ul>
<li>树状发散<br>
我们在思考或写作时，我们的思维总是非常发散的，可以想到非常多的点，但我们在表达的时候却很难表达清楚，因为这些点是无序的。树状发散正是需要我们抓住事物的关键，通过联想和想象找到与事物的联系点，然后用线把它们连接起来。</li>
<li>颜色丰富<br>
相对于黑白纯色来说，人们对于丰富的颜色的敏感度是非常高的，更加有利于我们的记忆。</li>
<li>图形呈现<br>
文字对于我们来说是非常枯燥的，你可能不记得你的朋友的名字，但却忘不了他的样子。我们一旦记住了某个图形，那么我们对它的记忆便会更加深刻。</li>
<li>内容精炼<br>
对于长篇大论，我们更喜欢精炼简短。这在我们开始上学的时候我们就开始练习了，比如：我们在阅读的时候划重点，背中心思想...</li>
</ul>
<h2 id="三-思维导图的作用">三 思维导图的作用</h2>
<hr>
<p>思维导图虽然应用的非常广泛，也可以很好的帮助我们做记录，提高我们的工作效率。但它的应用场景是比较有限的，主要是在以下几种场景使用：</p>
<ul>
<li>内容记录</li>
<li>问题决策</li>
<li>思维洞察</li>
</ul>
<h3 id="1-内容记录">1 内容记录</h3>
<p><img src="http://upload-images.jianshu.io/upload_images/3126293-b84599a3f79a3c9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内容记录"></p>
<p>其中内容记录的种类包括 文章笔记、会议记录、信息传达 和 列举大纲，它们也被应用在不同的场景，但是它们都需要我们具备总结能力，以便我们可以快速的捕捉重点，我们可以通过以下几点来锻炼总结能力：</p>
<ul>
<li>句子练习</li>
<li>段落练习</li>
<li>文章练习</li>
<li>书本练习</li>
</ul>
<p><strong>文章笔记</strong><br>
<img src="http://upload-images.jianshu.io/upload_images/3126293-8ae681d2f920d4e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文章笔记"></p>
<p><strong>会议记录</strong><br>
<img src="http://upload-images.jianshu.io/upload_images/3126293-89ee9eb79924fc1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="会议记录"><br>
参加会议、培训，我们想要做记录是非常困难的，我们需要在固定的时间内去听，识别重点，然后记录下来。<br>
所以在这种情况下，我们可以进行录音，在会议过程中只记重点，事后在听录音并完善自己的记录。</p>
<p><strong>列举大纲</strong><br>
<img src="http://upload-images.jianshu.io/upload_images/3126293-356b7d4917fa75be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="列举大纲"><br>
列举大纲是文章记录的反向思考过程，主要用来在写作前捋清思路。</p>
<ol>
<li>首先我们需要确定中心点，</li>
<li>其次对中心点进行拆分，我们需要分哪几个点进行阐述</li>
<li>然后我们在针对每一个点进行发散思考，把自己想到的点记录在纸上，最后在将这些点进行归纳串联</li>
<li>画思维导图</li>
<li>信息补充，开始下笔写作</li>
</ol>
<p><strong>信息传达</strong><br>
<img src="http://upload-images.jianshu.io/upload_images/3126293-203c5ae66f0428b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="信息传达"><br>
信息传达用思维导图来做是非常高效的，因为你的 BOSS 可不想看到你的长篇大论，然后再自己再挑出重点...如果可以用一张图的形式来给你的 BOSS 讲解，是不是高效了很多，但其中很困难的一点就是我们需要确保我们自己所表达的东西在对方看来和我们是一致的，所以我们在做图的时候需要尽量多的换位思考，确保他人可以把握住你想要表达的信息。</p>
<h3 id="2-问题决策">2 问题决策</h3>
<p><img src="http://upload-images.jianshu.io/upload_images/3126293-3ca18bdba4f9b387.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题决策"></p>
<h3 id="3-思维洞察">3 思维洞察</h3>
<p><img src="http://upload-images.jianshu.io/upload_images/3126293-53b4a82a854d099d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="思维洞察"></p>
<p>其中<br>
广度思维更有利于我们在组织活动的时候使用，我们可以发散思考考虑的更加全面，从而确保活动可以顺利的进行。</p>
<p>深度思维更有利于我们在解决问题的时候使用，对问题进行拆分，深度解析。</p>
<blockquote>
<p>总结：思维导图可以用来<br>
① 内容记录 -&gt; 文章笔记、会议记录、写作、信息传达<br>
② 问题决策 -&gt; 更加理性的方式来做决定<br>
③ 广度思考 -&gt; 更加适合用来组织活动<br>
④ 深度思考 -&gt; 更加适合用来解决问题</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/3126293-b771f94270df747f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="纲要.jpg"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🏃跑步？也许你一开始就跑错咯]]></title>
        <id>https://aceysx.github.io/post/🏃跑步？也许你一开始就跑错咯</id>
        <link href="https://aceysx.github.io/post/🏃跑步？也许你一开始就跑错咯">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>前几天在朋友圈看到小波老师发的一个小故事，大概内容是，读书人在讨论XXX思维，XXX理论...的时候，如果没有读书的人碰到，大多都会说，卧槽，这是传销，骗人的...</p>
<p>在很多方面都是这样，如果你愿意去学习， 愿意探索，你总是会发现更优解来优化当前的自己。比如睡眠，阅读，沟通，健身.... 当你对它们亮起绿灯的时候，你会发现 哇，还可以这样.. 不过一旦你亮起了黄灯，那么 卧槽，这绝对是骗人的 就来了..  养成绿灯思维很重要。</p>
<hr>
<p>来，开始聊聊跑步，如果你点进来了。我猜猜你可能遇到过以下的场景</p>
<blockquote>
<p>还没开始就结束了：每次跑步还没到几分钟，我的妈，就上气不接下气，两腿不听使唤... 第二天一想起前一天跑步的痛苦赶脚，嗯，太痛苦了，还是算了... 不去了</p>
</blockquote>
<blockquote>
<p>我每天都跑，但是咋就是减肥减不下来...</p>
</blockquote>
<blockquote>
<p>长期跑步后，跑了一身的伤痛出来</p>
</blockquote>
<blockquote>
<p>......</p>
</blockquote>
<h5 id="首先我们先来了解下科学跑步的几种方式"><strong>首先</strong>，我们先来了解下科学跑步的几种方式</h5>
<ol>
<li>快走：大概 10min/km</li>
<li>慢跑：大概 6～8min/km</li>
<li>短跑</li>
</ol>
<p>来看看自己是属于哪种？大多数是第三种吧，你可能就会说了，第三种咋了，我跑的快还不好？跑的快不是消耗的热量就越多吗，减肥就更快吗？No No No，跑的快意味着你很难将这种速度保持很长的时间，一般都会在半个小时内结束掉这次跑步。我们知道想要减肥，那么就需要我们消耗的热量要多余摄入的，而这半个小时消耗的热量可能才刚好把当时多摄入的热量消耗掉，而短跑的话，体内的糖类会优先供能，而我们的脂肪缺毫发无伤... 这就是为什么我们即使天天跑，而体重很难降下来。说白了，我们要选择合适自己的跑步速率。</p>
<h5 id="那么我们的跑步速率是多少呢">那么我们的跑步速率是多少呢？</h5>
<p>首先先来了解一个概念，<strong>心率</strong></p>
<blockquote>
<p>心率是每分钟的心跳数，反应了活动的剧烈程度，目前身体对血液需求量的大小。当跑的更快时，会大口呼吸，肌肉就会收缩剧烈，身体就需要大量的供血量来输送氧气和运走代谢副产物，于是心率就会增高</p>
</blockquote>
<p>那么心率是用来干撒用的呢？心率可以反映你费力程度的真实数据，决定了你的训练强度。可以告诉你现在是不是跑的太快了（心率偏高），是不是可以再加速，是不是可以继续跑很久... 所以在跑步的时候，我们需要时刻关注我们的心率。</p>
<p>每个人都会有一个心率的最高点（最大心率）和最低点（安静心率），这两个心率分别是</p>
<ul>
<li>最大心率：一般在网上我们可以搜到说最大心率=220-年龄 这种简单粗暴的方式来计算得到，但是这个并不准确，每个人的最大心率都是不同的，且可以通过锻炼得到提升的。那么如果想要测试的话，可以可以进行一个最快的几分钟跑步，通过心率测试工具，来测得最大心率。</li>
<li>安静心率：普通人一般会在60～70之间，常年运动的人为40～50，安静心率月底，代表心肺功能越强。可以在上床休息的时候或者刚起床的时候进行测试。</li>
</ul>
<p>我们把最大心率减去安静心率，就可以得到储备心率，储备心率很重要，它将决定我们在跑步的时候，根据我们自己的目的来确定我们跑步心率。</p>
<p>储备心率 是一个范围心率，可以分为 <strong>无氧区</strong>，<strong>过渡区</strong>和<strong>有氧区</strong></p>
<p><strong>无氧区</strong></p>
<ul>
<li>心率一般高于储备心率的88%以上，多是100，200，400米短跑为主。</li>
<li>主要以糖类为能量补给，产生大量乳酸，所以在每次短跑结束后我们总是腿特别酸痛</li>
<li>无氧区又分为
<ul>
<li>A强度（Anaerobic 无氧 88%～95%）</li>
<li>I强度（Interval 间歇 95%～100%）</li>
<li>R强度（Repetition 反复）</li>
</ul>
</li>
</ul>
<p><strong>过渡区</strong></p>
<ul>
<li>心率84%～88%之间</li>
<li>过渡区又分为
<ul>
<li>T强度（Threshold 乳酸阈值） 长期T跑，有助于提高软酸临界值，提高长跑能力</li>
</ul>
</li>
</ul>
<p><strong>有氧区</strong></p>
<ul>
<li>心率保持在59～84%之间，多以LSD马拉松，长距离慢跑</li>
<li>以脂肪为热量消耗 59%～74%</li>
<li>有氧区又分为
<ul>
<li>E强度（easy）</li>
<li>M强度（Marathon 马拉松）74%～84%</li>
</ul>
</li>
</ul>
<p>所以呐，如果你想要降脂（降脂和减重的区别相信这么聪明的你肯定知道的），那么你在跑步的时候就需要保持心率为59～74%的储备心率，长时间持续性的消耗脂肪。如果没有测试心率的工具，那么一个方式也可以让自己心率保持在这个范围，在跑步时候控制自己的速率，可以边跑步，边聊天，且不会出现喘气，可以一直跑下去这种状态。<br>
如果你想要提高自己长跑能力，那么就将自己的心率保持在过渡区。<br>
怎么样，很简单吧。</p>
<p>而对于跑姿和装备的选择，啊额嗯，下回继续聊。</p>
]]></content>
    </entry>
</feed>